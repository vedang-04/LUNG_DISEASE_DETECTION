version: 2

defaults: &defaults
  docker:
    - image: circleci/python:3.9.5
  working_directory: ~/project

prepare_venv: &prepare_venv
  run:
    name: Create venv
    command: |
      python -m venv venv
      source venv/bin/activate
      pip install --upgrade pip
prepare_tox: &prepare_tox
  run:
    name: Install tox
    command: |
      sudo pip install --upgrade pip
      pip install --user tox
fetch_data: &fetch_data
  run:
    name: Set script permissions and fetch data
    command: |
      source venv/bin/activate
      chmod +x ./scripts/fetch_kaggle_dataset.sh
      ./scripts/fetch_kaggle_dataset.sh
jobs:
  test_app:
    <<: *defaults
    working_directory: ~/project/ds_project/ds_project_api
    steps:
      - checkout:
          path: ~/project
      - *prepare_tox
      - run:
          name: Runnning app tests
          command: |
            tox -e test_api
  deploy_app_to_heroku:
    <<: *defaults
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Deploy to Heroku
          command: |
            git subtree push --prefix ds_project/ds_project_api https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
  test_and_upload_regression_model:
    <<: *defaults
    working_directory: ~/project
    steps:
      - checkout:
          path: ~/project
      - *prepare_venv
      - run:
          name: Install requirements
          command: |
            . venv/bin/activate
            pip install -r ds_project/ds_project_package/requirements/test_requirements.txt
      - run:
          name: Fetch the data
          command: |
            . venv/bin/activate
            chmod +x ./scripts/fetch_kaggle_large_dataset.sh
            ./scripts/fetch_kaggle_large_dataset.sh
      - run:
          name: Test the model
          command: |
            . venv/bin/activate
            PYTHONPATH=./ds_project/ds_project_package python ds_project/ds_project_package/image_classification_model/train_pipeline.py
      - run:
          name: Publish model to Gemfury
          command: |
            . venv/bin/activate
            chmod +x ./scripts/publish_model.sh
            ./scripts/publish_model.sh ./ds_project/ds_project_package/
  deploy_app_container_in_heroku:
    <<: *defaults
    steps:
      - setup_remote_docker:
          # Supported versions: https://circleci.com/docs/2.0/building-docker-images/#docker-version
          version: 20.10.6
      - checkout:
          path: ~/project
      - run:
          name: Build image
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            cd ds_project/ds_project_api/docker && make build-ml-api-heroku
      - run:
          name: Push Image to Heroku
          command: |
            # Push the built container to the Heroku image registry
            cd ds_project/ds_project_api/docker && make push-ml-api-heroku
      - run:
          name: Release to Heroku
          command: |
            cd ds_project/ds_project_api/docker && make release-heroku
  section_11_build_and_push_to_heroku_docker:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Setup Heroku CLI
          command: |
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run: 
          name: Build and Push Image
          command: |
            make build-ml-api-heroku push-ml-api-heroku
      - run: 
          name: Release to Heroku
          command: |
            heroku container:release web --app $HEROKU_APP_NAME
tags_only: &tags_only
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^.*/

workflows:
  version: 2
  section_07:
    jobs:
      - test_and_upload_regression_model
      #- test_app:
      #    requires:
      #      - test_and_upload_regression_model
      #- deploy_app_to_heroku:
      #    requires:
      #      - test_app
      #- deploy_app_container_in_heroku

